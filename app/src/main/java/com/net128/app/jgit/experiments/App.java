/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.net128.app.jgit.experiments;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.LogCommand;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.time.Instant;
import java.util.List;

public class App {

    public static void main(String[] args) throws IOException, IllegalStateException, GitAPIException, URISyntaxException, InterruptedException {
        new App().run();
    }

    public void run() throws GitAPIException, IOException, URISyntaxException, InterruptedException {
        final var gitDirectory = new File(System.getProperty("java.io.tmpdir"), "JGitTestRepository");
        final var csvDest = new File(gitDirectory,"csv");
        ResourceUtils.deleteDirectory(gitDirectory);
        try (Git git = Git.init().setDirectory(gitDirectory).call()) {
            System.out.println("Created repository: " + git.getRepository().getDirectory());
            ResourceUtils.copyResources("/csv",csvDest);
            git.add().addFilepattern(".").call();
            git.commit().setMessage("Initial commit").call();
            ObjectId initialCommitId = git.getRepository().resolve(Constants.HEAD);

            ResourceUtils.copyResources("/csv_mod/CITY.csv", new File(csvDest,"CITY.csv"));
            git.add().addFilepattern(".").call();
            git.commit().setMessage("Modified CITY.csv").call();
            git.tag().setName("Version-1").setForceUpdate(true).call();

            Thread.sleep(2000);
            ResourceUtils.copyResources("/csv_mod/COUNTRY_CODES.csv", new File(csvDest,"COUNTRY_CODES.csv"));
            git.add().addFilepattern(".").call();
            git.commit().setMessage("Modified COUNTRY_CODES.csv").call();
            git.tag().setName("Version-2").setForceUpdate(true).call();

            Thread.sleep(2000);
            ResourceUtils.copyResources("/csv_mod2/CITY.csv", new File(csvDest,"CITY.csv"));
            ResourceUtils.copyResources("/csv_mod2/COUNTRY_CODES.csv", new File(csvDest,"COUNTRY_CODES.csv"));
            git.add().addFilepattern(".").call();
            git.commit().setMessage("Modified COUNTRY_CODES.csv").call();
            git.tag().setName("Version-2").setForceUpdate(true).call();

            Thread.sleep(2000);
            git.checkout().setName(initialCommitId.getName()).addPath(".").call();
            git.add().addFilepattern(".").call();
            git.commit().setMessage("Reverted to initial version").call();
            git.tag().setName("Version-3").setForceUpdate(true).call();

            showTagCommits(git);

            showFileCommits(git, "csv/CAR.csv");
            showFileCommits(git, "csv/CITY.csv");
            showFileCommits(git, "csv/COUNTRY_CODES.csv");
        }
    }

    private void showFileCommits(Git git, String filePath) throws IOException, GitAPIException {
        System.out.println("\nFile Commits: "+filePath);
        LogCommand logCommand = git.log()
                .add(git.getRepository().resolve(Constants.HEAD))
                .addPath(filePath);

        for (RevCommit revCommit : logCommand.call()) {
            System.out.println(commitInfo(revCommit));
        }
    }

    private void showTagCommits(Git git) throws IOException, GitAPIException {
        Repository repository = git.getRepository();
        System.out.print("\nTag Commits");
        List<Ref> call = git.tagList().call();
        for (Ref ref : call) {
            System.out.println("\n    Tag: " + ref.getName() + " " + ref.getObjectId().getName());

            Ref peeledRef = git.getRepository().getRefDatabase().peel(ref);

            ObjectId commitId;
            if(peeledRef.getPeeledObjectId() != null) {
                commitId = peeledRef.getPeeledObjectId();
            } else {
                commitId = ref.getObjectId();
            }

            try (RevWalk revWalk = new RevWalk(repository)) {
                RevCommit commit = revWalk.parseCommit(commitId);
                System.out.println("    "+commitInfo(commit));
            }
        }
    }

    private String commitInfo(RevCommit revCommit) {
        return "    "
                + Instant.ofEpochMilli(revCommit.getCommitTime()*1000L).toString()
                + ": "+revCommit.getId();
    }
}